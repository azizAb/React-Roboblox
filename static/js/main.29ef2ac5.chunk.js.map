{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","param","className","src","monster","id","alt","name","email","CardList","props","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","fetch","then","response","json","users","setState","this","filteredMonsters","filter","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAEaA,G,kBAAO,SAAAC,GAAK,OACrB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BAAoEC,IAAI,YAChF,6BAAKL,EAAMG,QAAQG,OACnB,4BAAIN,EAAMG,QAAQI,aCHbC,EAAW,SAAAC,GAAK,OACzB,qBAAKR,UAAU,YAAf,SACKQ,EAAMC,SAASC,KAAI,SAAAR,GAAO,OAC3B,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCJdQ,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,uBACIb,UAAU,SACVc,KAAK,SACLF,YAAaA,EACbG,SAAUF,MC4CHG,E,kDA7Cb,aAAc,IAAD,8BACX,gBAEKC,MAAQ,CACXR,SAAW,GAcXS,YAAc,IAlBL,E,gEAsBK,IAAD,OACjBC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAAEf,SAAUc,S,+BAGjC,IAAD,SACyBE,KAAKR,MAA9BR,EADA,EACAA,SAAUS,EADV,EACUA,YACXQ,EAAmBjB,EAASkB,QAAO,SAAAzB,GAAO,OAAIA,EAAQG,KAAKuB,cAAcC,SAASX,EAAYU,kBACpG,OACE,sBAAK5B,UAAU,MAAf,UACE,iDACA,cAAC,EAAD,CACEY,YAAY,iBACZC,aAAc,SAAAiB,GACZ,EAAKN,SAAS,CAAEN,YAAaY,EAAEC,OAAOC,WAE1C,cAAC,EAAD,CAAUvB,SAAUiB,W,GAxCVO,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.29ef2ac5.chunk.js","sourcesContent":["import './card.styles.css';\r\n\r\nexport const Card = param => (\r\n    <div className='card-container'>\r\n        <img src={`https://robohash.org/${param.monster.id}?set=set2&size=180x180`} alt='monster'/>\r\n        <h2>{param.monster.name}</h2>\r\n        <p>{param.monster.email}</p>\r\n    </div>\r\n)","import './card-list.styles.css';\r\nimport {Card} from '../card/card.component';\r\n\r\nexport const CardList = props => (\r\n    <div className='card-list'>\r\n        {props.monsters.map(monster => (\r\n        <Card key={monster.id} monster={monster}/>\r\n        ))}\r\n    </div>\r\n)","import './search-box.styles.css';\r\n\r\nexport const SearchBox = ({placeholder, handleChange}) => (\r\n    <input \r\n        className='search'\r\n        type='search' \r\n        placeholder={placeholder} \r\n        onChange={handleChange}\r\n    />\r\n)","import './App.css';\nimport { CardList } from './components/card-list/card-list.component'\nimport {SearchBox} from './components/search-box/search-box.component'\nimport { Component } from 'react';\n\nclass App extends Component{\n  constructor(){\n    super();\n\n    this.state = {\n      monsters : [\n        // {\n        //   name: 'Frankenstein',\n        //   id: 'mns1'\n        // },\n        // {\n        //   name: 'Dracula',\n        //   id: 'mns2'\n        // },\n        // {\n        //   name: 'Zombie',\n        //   id: 'mns3'\n        // }\n      ],\n      searchField : ''\n    }\n  }\n\ncomponentDidMount(){\n  fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({ monsters: users}));\n}\n\n  render() {\n    const {monsters, searchField} = this.state;\n    const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()));\n    return (\n      <div className=\"App\">\n        <h1>Mosters Rolodex</h1>\n        <SearchBox \n          placeholder='Search Monster' \n          handleChange={e => {\n            this.setState({ searchField: e.target.value})\n        }}/>\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}